
'One Hour One Life':  The Atoms of Deep Interactivity


In my forthcoming game "One Hour One Life", which simulates the redevelopment of civilization from scratch across hundreds of human generations, I'm setting out to fill the world with 10,000 fully interactive objects, and I'm trying to do it with a team of one.

By "fully interactive," I mean that a hammer and a mallet don't just have different artwork and different names, but that they actually function differently in their interaction with other objects.  With such a grand scope, the usual method of designing and authoring interactive relationships---hand-coding or hand-scripting each object---becomes unfeasible.

Taking inspiration from the way that Minecraft unlocked deep spacial interaction via coarse abstraction (the 1x1 meter block allowed us to finally pierce the 3D facade and find out what was inside every hillside), I decided to design a similarly coarse abstraction for object interaction.  My initial abstraction was extremely simple:  every object interaction can be defined with an A + T = A' + T' transition.  An Actor plus a Target potentially transforms both the Actor and the Target.

This single model captures almost every object interaction imaginable:
[Ax] + [Log] = [Ax] + [Kindling]
[String] + [Bow Shaft] = [ ] + [Bow]
[Bucket] + [Milk Cow] = [Bucket Of Milk] + [Dry Cow]
[Tire] + [Wheelless Car] = [ ] + [Car with One Tire]
[Full Gas Can] + [Empty Car] = [Empty Gas Can] + [Fueled Car]

Here I had a coarse abstraction that could model everything, so I was done, right?  I could potentially keep it this pure and still achieve the goal of 10,000 deeply-interactive objects.  The heart of this talk is about the process of using this coarse abstraction on the ground, as a designer, and the practical modifications to the model that I had to make along the way.

The first and most obvious concession was for containment.  Yes, this can be modeled through the original abstraction with a transition like this:

[Log] + [Cart with One Log] = [ ] + [Cart with Two Logs],

When we consider a cart holding both logs and rocks, the combinatorial explosion issues are obvious.  Objects needed slots that could hold other objects.

The next concession was a category system for objects that have interactions in common, allowing those transitions to be defined once, abstractly, instead of repeating them for each object.

The final concession was an object use-count system, allowing objects to transform with repeated use, eliminating step-by-step transitions along the way.

Despite these concessions, the vast majority of object interactions can be defined using the core model alone, speaking to the creative power of a simple, heavily-constrained core system.

The talk will include a demo of the tool that I use to design and modify object interactions, and a tour of the existing object interaction tree.  Finally, a new interactive object will be added to the game live, on stage, to demonstrate how the design system works in practice.




Short Description:

How can a one-person team make a game with 10,000 deeply interactive objects?  A game where a hammer and a mallet and a rock and a jar and a seam ripper and a potato peeler not only look different, but function differently?  With such a large content scope, the usual method of custom coding for each object is out of the question.  This talk will present a simple, core abstraction that makes 10,000 interactive objects possible---a kind of fundamental atomic theory for object interactivity---along with the practical modifications that were needed to use this simple model in the game "One Hour One Life".  This approach flies in the face of our natural designer instinct to grow the complexity of the underlying systems to match the complexity of the target design.


Takeaway:

Attendees will be given a detailed look at the inner workings of a game with a laughably large interactive scope, and find out how a highly constrained, simple core system makes such a scope possible.


Intended Audience:
Game designers who want an up-close look at an experimental design in progress, and anyone who wants to be inspired to think big and push a ridiculous idea toward its logical conclusion.




Speaking history and links:

Presented at GDC EGW three times over the years (r=4.89 in 2011, 77% excellent in 2013, 66% excellent in 2016)
Won the final GDC Game Design Challenge in 2013 with A Game for Someone (86% excellent)
GDC Game Design Challenge 2012 (87% excellent, included in GDC card deck)
Keynote at MIGS, 2011
Won the GDC Game Design Challenge in 2011 with Chain World (r=4.73)
GDC Microtalk in 2011(r=4.72)
Keynote at GDC Serious Games Summit, 2010
Spoke at GDC Indie Summit in 2009

Invited speaker at MIT, Yale, Berkeley, NYU, CMU, Drexel, GATech, Hastings, Champlain, Hallmark, Clarkson, GDX, Project Horseshoe.

Links:
http://hcsoftware.sourceforge.net/jason-rohrer/
http://onehouronelife.com/



Bio:

I've been making games for thirteen years. Along the way, I started a religion, made Clint Hocking cry, and buried an $8000 hunk of titanium in the Nevada desert.


Game Credits:

Since 2004, I have designed, programmed, and released 18 games: Transcend, Cultivation, Passage, Gravitation, Perfectionism, Idealism, Police Brutality, Immortality, Regret, i45hg, Crude Oil, Between, Primrose, Sleep Is Death, Inside a Star-filled Sky, and Diamond Trust of London, The Castle Doctrine, and Cordial Minuet.
